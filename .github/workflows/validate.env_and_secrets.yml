name: Validate Environment Secrets

on:
  # ------------------------
  # ---- manual testing ----
  # ------------------------
  workflow_dispatch: # Manual trigger for testing
    inputs:
      environment:
        description: "Environment to validate (e.g., production, development)"
        required: true
        default: "development"
        type: string
  # ---------------------------
  # ---- automatic testing ----
  # ---------------------------
  #
  pull_request: # Automatically run on PRs
    branches: [development, main]
  #
  # ---------------------------
  # ---- workflow_call --------
  # ---------------------------
  #
  # i.e. called by other workflows (e.g. cd.dev.yml, cd.prod.yml)
  #
  workflow_call:
    inputs: # expected inputs
      environment:
        description: "The environment context (e.g., production, development)"
        required: true
        type: string
    secrets: # expected secrets
      PROD_ENV_FILE:
        required: true # required for PROD
      DEV_ENV_FILE:
        required: false #  optional for DEV

      PROD_SSH_PRIVATE_KEY:
        required: true
      DEV_SSH_PRIVATE_KEY:
        required: false

      PROD_GHCR_PAT_OR_TOKEN:
        required: true
      DEV_GHCR_PAT_OR_TOKEN:
        required: false

jobs:
  validate-prod-secrets:
    runs-on: ubuntu-latest
    env:
      PROD_ENV_FILE_PRESENT: ${{ secrets.PROD_ENV_FILE != '' }}
    steps:
      - name: Check PROD environment secrets
        if: env.PROD_ENV_FILE_PRESENT == 'true'
        run: |
          echo "${{ secrets.PROD_ENV_FILE }}" > .env.prod
          # Verify essential keys exist
          grep -q "COMPOSE_PROJECT_NAME" .env.prod && echo "✓ COMPOSE_PROJECT_NAME exists" || { echo "✗ Missing COMPOSE_PROJECT_NAME"; exit 1; }
          grep -q "HOST_PORT_FRONTEND" .env.prod && echo "✓ HOST_PORT_FRONTEND exists" || { echo "✗ Missing HOST_PORT_FRONTEND"; exit 1; }
          grep -q "BACKEND_INTERNAL_PORT" .env.prod && echo "✓ BACKEND_INTERNAL_PORT exists" || { echo "✗ Missing BACKEND_INTERNAL_PORT"; exit 1; }
          # Count config lines for sanity check
          CONFIG_LINES=$(grep -v '^#' .env.prod | grep -v '^$' | wc -l)
          echo "Total config lines: $CONFIG_LINES"
          if [ "$CONFIG_LINES" -lt 5 ]; then
            echo "⚠️ Warning: Fewer than expected config lines!"
            exit 1
          fi
          # Test Docker image references
          grep -q "IMAGE_TAG_BACKEND" .env.prod && echo "✓ IMAGE_TAG_BACKEND exists" || { echo "⚠️ Missing IMAGE_TAG_BACKEND (may be set by CD)"; }
          # Clean up
          rm .env.prod
          echo "✅ PROD environment file validated successfully"
      - name: Skip PROD environment file check if not provided
        if: env.PROD_ENV_FILE_PRESENT == 'false'
        run: echo "ℹ️ PROD_ENV_FILE secret not provided, skipping check."

  validate-dev-secrets:
    runs-on: ubuntu-latest
    # ----------------------------------------
    # ---- only run if environment is dev ----
    # ----------------------------------------
    env:
      DEV_ENV_FILE_PRESENT: ${{ secrets.DEV_ENV_FILE != '' }}
    steps:
      - name: Check DEV environment secrets (if provided)
        if: env.DEV_ENV_FILE_PRESENT == 'true'
        run: |
          echo "${{ secrets.DEV_ENV_FILE }}" > .env.dev
          # Test Docker image references
          grep -q "SQLX_OFFLINE" .env.dev && echo "✓ SQLX_OFFLINE exists" || { echo "✗ Missing SQLX_OFFLINE"; exit 1; }
          grep -q "IMAGE_TAG_BACKEND" .env.dev && echo "✓ IMAGE_TAG_BACKEND exists" || { echo "⚠️ Missing IMAGE_TAG_BACKEND (may be set by CD)"; }
          # Clean up
          rm .env.dev
          echo "✅ DEV environment file validated successfully"
      - name: Skip DEV environment file check if not provided
        if: env.DEV_ENV_FILE_PRESENT == 'false'
        run: echo "ℹ️ DEV_ENV_FILE secret not provided, skipping check."

  validate-ssh-keys:
    runs-on: ubuntu-latest
    # ----------------------------------------
    # ---- only run if environment is prod ----
    # ----------------------------------------
    env:
      PROD_SSH_KEY_PRESENT: ${{ secrets.PROD_SSH_PRIVATE_KEY != '' }}
      DEV_SSH_KEY_PRESENT: ${{ secrets.DEV_SSH_PRIVATE_KEY != '' }}

    steps:
      - name: Verify PROD SSH key format
        # Use env context for condition check
        if: env.PROD_SSH_KEY_PRESENT == 'true'
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ssh_key_prod
          if ! grep -q "BEGIN .* PRIVATE KEY" ssh_key_prod; then
            echo "✗ Invalid PROD SSH key format!"
            exit 1
          fi
          echo "✓ PROD SSH key format valid"
          rm ssh_key_prod
      - name: Skip PROD SSH key check if secret not provided
        # Use env context for condition check
        if: env.PROD_SSH_KEY_PRESENT == 'false'
        run: echo "ℹ️ PROD_SSH_PRIVATE_KEY secret not provided, skipping check."

      - name: Verify DEV SSH key format (if environment is dev)
        # Use env context for condition check
        if: inputs.environment == 'development' && env.DEV_SSH_KEY_PRESENT == 'true'
        run: |
          echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ssh_key_dev
          if ! grep -q "BEGIN .* PRIVATE KEY" ssh_key_dev; then
            echo "✗ Invalid DEV SSH key format!"
            exit 1
          fi
          echo "✓ DEV SSH key format valid"
          rm ssh_key_dev
      - name: Skip DEV SSH key check if env is dev but secret not provided
        # Use env context for condition check
        if: inputs.environment == 'development' && env.DEV_SSH_KEY_PRESENT == 'false'
        run: echo "ℹ️ DEV_SSH_PRIVATE_KEY secret not provided for dev environment, skipping check."

  validate-docker-credentials:
    runs-on: ubuntu-latest
    # Set secrets as environment variables for the job
    env:
      PROD_GHCR_TOKEN_PRESENT: ${{ secrets.PROD_GHCR_PAT_OR_TOKEN != '' }}
      DEV_GHCR_TOKEN_PRESENT: ${{ secrets.DEV_GHCR_PAT_OR_TOKEN != '' }}
    steps:
      - name: Check PROD GitHub Container Registry credentials
        # Use env context for condition check
        if: env.PROD_GHCR_TOKEN_PRESENT == 'true'
        run: |
          # Using secrets context inside run is fine
          if [[ -z "${{ secrets.PROD_GHCR_PAT_OR_TOKEN }}" ]]; then
            echo "✗ PROD_GHCR_PAT_OR_TOKEN is empty!"
            exit 1
          fi
          echo "✓ PROD GHCR token exists"
      - name: Skip PROD GHCR check if secret not provided
        # Use env context for condition check
        if: env.PROD_GHCR_TOKEN_PRESENT == 'false'
        run: echo "ℹ️ PROD_GHCR_PAT_OR_TOKEN secret not provided, skipping check."

      - name: Check DEV GitHub Container Registry credentials (if environment is dev)
        # Use env context for condition check
        if: inputs.environment == 'development' && env.DEV_GHCR_TOKEN_PRESENT == 'true'
        run: |
          # Using secrets context inside run is fine
          if [[ -z "${{ secrets.DEV_GHCR_PAT_OR_TOKEN }}" ]]; then
            echo "✗ DEV_GHCR_PAT_OR_TOKEN is empty!"
            exit 1
          fi
          echo "✓ DEV GHCR token exists"
      - name: Skip DEV GHCR check if env is dev but secret not provided
        # Use env context for condition check
        if: inputs.environment == 'development' && env.DEV_GHCR_TOKEN_PRESENT == 'false'
        run: echo "ℹ️ DEV_GHCR_PAT_OR_TOKEN secret not provided for dev environment, skipping check."
