name: Validate Environment Secrets

on:
  # ------------------------
  # ---- manual testing ----
  # ------------------------
  workflow_dispatch: # Manual trigger for testing
    inputs:
      environment:
        description: "Environment to validate (e.g., production, development)"
        required: true
        default: "development"
        type: string
  # ---------------------------
  # ---- automatic testing ----
  # ---------------------------
  #
  pull_request: # Automatically run on PRs
    branches: [development, main]
  #
  # ---------------------------
  # ---- workflow_call --------
  # ---------------------------
  #
  # i.e. called by other workflows (e.g. cd.dev.yml, cd.prod.yml)
  #
  workflow_call:
    inputs:
      # environment context (prod or dev)
      environment:
        description: "The environment context (e.g., production, development)"
        required: true
        type: string
    secrets:
      # env file
      PROD_ENV_FILE:
        required: false
      DEV_ENV_FILE:
        required: false

      # ssh keys
      PROD_SSH_PRIVATE_KEY:
        required: false
      DEV_SSH_PRIVATE_KEY:
        required: false

      # ghcr credentials
      PROD_GHCR_PAT_OR_TOKEN:
        required: false
      DEV_GHCR_PAT_OR_TOKEN:
        required: false

jobs:
  validate-prod-secrets:
    # Run only for production environment
    if: inputs.environment == 'production'
    runs-on: ubuntu-latest
    env:
      PROD_ENV_FILE_PRESENT: ${{ secrets.PROD_ENV_FILE != '' }}
    steps:
      # ---- Runtime Check for Required Prod Secrets ----
      - name: Ensure PROD_ENV_FILE is provided for production
        if: env.PROD_ENV_FILE_PRESENT == 'false'
        run: |
          echo "::error::Secret PROD_ENV_FILE is required for environment 'production' but was not provided."
          exit 1
      # ---- Actual Validation Steps ----
      - name: Check PROD environment secrets
        # This step now assumes the secret is present due to the check above
        run: |
          echo "${{ secrets.PROD_ENV_FILE }}" > .env.prod
          # Verify essential keys exist
          grep -q "COMPOSE_PROJECT_NAME" .env.prod && echo "✓ COMPOSE_PROJECT_NAME exists" || { echo "✗ Missing COMPOSE_PROJECT_NAME"; exit 1; }
          grep -q "HOST_PORT_FRONTEND" .env.prod && echo "✓ HOST_PORT_FRONTEND exists" || { echo "✗ Missing HOST_PORT_FRONTEND"; exit 1; }
          grep -q "BACKEND_INTERNAL_PORT" .env.prod && echo "✓ BACKEND_INTERNAL_PORT exists" || { echo "✗ Missing BACKEND_INTERNAL_PORT"; exit 1; }
          # Count config lines for sanity check
          CONFIG_LINES=$(grep -v '^#' .env.prod | grep -v '^$' | wc -l)
          echo "Total config lines: $CONFIG_LINES"
          if [ "$CONFIG_LINES" -lt 5 ]; then
            echo "⚠️ Warning: Fewer than expected config lines!"
            exit 1
          fi
          # Test Docker image references
          grep -q "IMAGE_TAG_BACKEND" .env.prod && echo "✓ IMAGE_TAG_BACKEND exists" || { echo "⚠️ Missing IMAGE_TAG_BACKEND (may be set by CD)"; }
          # Clean up
          rm .env.prod
          echo "✅ PROD environment file validated successfully"

  validate-dev-secrets:
    # Run only for development environment
    if: inputs.environment == 'development'
    runs-on: ubuntu-latest
    env:
      DEV_ENV_FILE_PRESENT: ${{ secrets.DEV_ENV_FILE != '' }}

    steps:
      # ---- Runtime Check for Required Dev Secrets ----
      - name: Ensure DEV_ENV_FILE is provided for development
        if: env.DEV_ENV_FILE_PRESENT == 'false'
        run: |
          echo "::error::Secret DEV_ENV_FILE is required for environment 'development' but was not provided."
          exit 1
      # ---- Actual Validation Steps ----
      - name: Check DEV environment secrets
        # This step now assumes the secret is present due to the check above
        run: |
          echo "${{ secrets.DEV_ENV_FILE }}" > .env.dev
          # Test Docker image references
          grep -q "SQLX_OFFLINE" .env.dev && echo "✓ SQLX_OFFLINE exists" || { echo "✗ Missing SQLX_OFFLINE"; exit 1; }
          grep -q "IMAGE_TAG_BACKEND" .env.dev && echo "✓ IMAGE_TAG_BACKEND exists" || { echo "⚠️ Missing IMAGE_TAG_BACKEND (may be set by CD)"; }
          # Clean up
          rm .env.dev
          echo "✅ DEV environment file validated successfully"

  validate-ssh-keys:
    # This job runs for both, steps inside are conditional
    runs-on: ubuntu-latest
    env:
      PROD_SSH_KEY_PRESENT: ${{ secrets.PROD_SSH_PRIVATE_KEY != '' }}
      DEV_SSH_KEY_PRESENT: ${{ secrets.DEV_SSH_PRIVATE_KEY != '' }}

    steps:
      # ---- Runtime Checks ----
      - name: Test PROD SSH Key is provided for production (skip if present)
        if: inputs.environment == 'production' && env.PROD_SSH_KEY_PRESENT == 'false'
        run: |
          echo "::error::Secret PROD_SSH_PRIVATE_KEY is required for environment 'production' but was not provided."
          exit 1
      - name: Test DEV SSH Key is provided for development (skip if present)
        if: inputs.environment == 'development' && env.DEV_SSH_KEY_PRESENT == 'false'
        run: |
          echo "::error::Secret DEV_SSH_PRIVATE_KEY is required for environment 'development' but was not provided."
          exit 1

      # ---- Actual Validation Steps ----
      - name: Verify PROD SSH key format
        if: inputs.environment == 'production' # Only run check if prod and secret was provided (checked above)
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ssh_key_prod
          if ! grep -q "BEGIN .* PRIVATE KEY" ssh_key_prod; then
            echo "✗ Invalid PROD SSH key format!"
            exit 1
          fi
          echo "✓ PROD SSH key format valid"
          rm ssh_key_prod

      - name: Verify DEV SSH key format
        if: inputs.environment == 'development' # Only run check if dev and secret was provided (checked above)
        run: |
          echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ssh_key_dev
          if ! grep -q "BEGIN .* PRIVATE KEY" ssh_key_dev; then
            echo "✗ Invalid DEV SSH key format!"
            exit 1
          fi
          echo "✓ DEV SSH key format valid"
          rm ssh_key_dev

  validate-docker-credentials:
    # This job runs for both, steps inside are conditional
    runs-on: ubuntu-latest
    env:
      PROD_GHCR_TOKEN_PRESENT: ${{ secrets.PROD_GHCR_PAT_OR_TOKEN != '' }}
      DEV_GHCR_TOKEN_PRESENT: ${{ secrets.DEV_GHCR_PAT_OR_TOKEN != '' }}
    steps:
      # ---- Runtime Checks ----
      - name: Ensure PROD GHCR Token is provided for production
        if: inputs.environment == 'production' && env.PROD_GHCR_TOKEN_PRESENT == 'false'
        run: |
          echo "::error::Secret PROD_GHCR_PAT_OR_TOKEN is required for environment 'production' but was not provided."
          exit 1
      - name: Ensure DEV GHCR Token is provided for development
        if: inputs.environment == 'development' && env.DEV_GHCR_TOKEN_PRESENT == 'false'
        run: |
          echo "::error::Secret DEV_GHCR_PAT_OR_TOKEN is required for environment 'development' but was not provided."
          exit 1

      # ---- Actual Validation Steps ----
      - name: Check PROD GitHub Container Registry credentials
        if: inputs.environment == 'production' # Only run check if prod and secret was provided (checked above)
        run: |
          if [[ -z "${{ secrets.PROD_GHCR_PAT_OR_TOKEN }}" ]]; then
            echo "✗ PROD_GHCR_PAT_OR_TOKEN is empty!"
            exit 1
          fi
          echo "✓ PROD GHCR token exists"

      - name: Check DEV GitHub Container Registry credentials
        if: inputs.environment == 'development' # Only run check if dev and secret was provided (checked above)
        run: |
          if [[ -z "${{ secrets.DEV_GHCR_PAT_OR_TOKEN }}" ]]; then
            echo "✗ DEV_GHCR_PAT_OR_TOKEN is empty!"
            exit 1
          fi
          echo "✓ DEV GHCR token exists"
