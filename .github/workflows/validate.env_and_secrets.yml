name: Validate Environment Secrets

on:
  workflow_dispatch: # Manual trigger for testing
  pull_request: # Automatically run on PRs
    branches: [development, main]
  workflow_call:
    secrets:
      PROD_ENV_FILE:
        required: true

      DEV_ENV_FILE:
        required: true

      PROD_SSH_PRIVATE_KEY:
        required: true

      DEV_SSH_PRIVATE_KEY:
        required: true

      PROD_GHCR_PAT_OR_TOKEN:
        required: true

      DEV_GHCR_PAT_OR_TOKEN:
        required: true

jobs:
  validate-prod-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check PROD environment secrets
        run: |
          echo "${{ secrets.PROD_ENV_FILE }}" > .env.prod
          # Verify essential keys exist
          grep -q "COMPOSE_PROJECT_NAME" .env.prod && echo "✓ COMPOSE_PROJECT_NAME exists" || { echo "✗ Missing COMPOSE_PROJECT_NAME"; exit 1; }
          grep -q "HOST_PORT_FRONTEND" .env.prod && echo "✓ HOST_PORT_FRONTEND exists" || { echo "✗ Missing HOST_PORT_FRONTEND"; exit 1; }
          grep -q "BACKEND_INTERNAL_PORT" .env.prod && echo "✓ BACKEND_INTERNAL_PORT exists" || { echo "✗ Missing BACKEND_INTERNAL_PORT"; exit 1; }
          # Count config lines for sanity check
          CONFIG_LINES=$(grep -v '^#' .env.prod | grep -v '^$' | wc -l)
          echo "Total config lines: $CONFIG_LINES"
          if [ "$CONFIG_LINES" -lt 5 ]; then
            echo "⚠️ Warning: Fewer than expected config lines!"
            exit 1
          fi
          # Test Docker image references
          grep -q "IMAGE_TAG_BACKEND" .env.prod && echo "✓ IMAGE_TAG_BACKEND exists" || { echo "⚠️ Missing IMAGE_TAG_BACKEND (may be set by CD)"; }
          # Clean up
          rm .env.prod
          echo "✅ PROD environment file validated successfully"

  validate-dev-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check DEV environment secrets
        run: |
          # Similar validation for DEV environment
          echo "${{ secrets.DEV_ENV_FILE }}" > .env.dev
          # Test Docker image references
          grep -q "SQLX_OFFLINE" .env.dev && echo "✓ SQLX_OFFLINE exists" || { echo "✗ Missing SQLX_OFFLINE"; exit 1; }
          grep -q "IMAGE_TAG_BACKEND" .env.dev && echo "✓ IMAGE_TAG_BACKEND exists" || { echo "⚠️ Missing IMAGE_TAG_BACKEND (may be set by CD)"; }
          # Clean up
          rm .env.dev
          echo "✅ DEV environment file validated successfully"

  validate-ssh-keys:
    runs-on: ubuntu-latest
    steps:
      - name: Verify SSH keys format
        run: |
          # Check PROD SSH key
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ssh_key_prod
          if ! grep -q "BEGIN .* PRIVATE KEY" ssh_key_prod; then
            echo "✗ Invalid PROD SSH key format!"
            exit 1
          fi
          echo "✓ PROD SSH key format valid"

          # Check DEV SSH key
          echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ssh_key_dev
          if ! grep -q "BEGIN .* PRIVATE KEY" ssh_key_dev; then
            echo "✗ Invalid DEV SSH key format!"
            exit 1
          fi
          echo "✓ DEV SSH key format valid"

          # Clean up
          rm ssh_key_*

  validate-docker-credentials:
    runs-on: ubuntu-latest
    steps:
      - name: Check GitHub Container Registry credentials
        run: |
          # Test if GHCR PAT works (without actually logging in)
          if [[ -z "${{ secrets.PROD_GHCR_PAT_OR_TOKEN }}" ]]; then
            echo "✗ PROD_GHCR_PAT_OR_TOKEN is empty!"
            exit 1
          fi
          if [[ -z "${{ secrets.DEV_GHCR_PAT_OR_TOKEN }}" ]]; then
            echo "✗ DEV_GHCR_PAT_OR_TOKEN is empty!"
            exit 1
          fi
          echo "✓ GHCR tokens exist (not validating actual auth)"
