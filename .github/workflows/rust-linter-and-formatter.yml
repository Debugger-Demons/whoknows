# .github/workflows/rust-linter.yml

name: Rust Linter

on:
  pull_request:
    branches:
      - development
  workflow_dispatch:

jobs:
  lint-rust:
    name: Lint Rust Code
    runs-on: ubuntu-latest

    permissions:
      contents: read        # To check out the code
      pull-requests: write  # To post review comments and create reviews
      checks: write         # To create check runs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # No fetch-depth needed unless reviewdog's diff_context *really* needs it,
        # but clippy will report based on the code checked out. Start without it.
        # with:
        #   fetch-depth: 0

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable # Or specify your toolchain file/version
        with:
          components: clippy, rustfmt

      - name: Install clippy-checkstyle-formatter
        run: cargo install clippy-checkstyle-formatter

      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Run cargo fmt (Check only)
        # This step will fail if formatting issues are found.
        # Reviewdog won't add specific comments for fmt issues here, but the job failure indicates the problem.
        run: cargo fmt --check
        # Optional: Add continue-on-error: true if you only want Clippy failures to fail the job

      - name: Run cargo clippy and Format Output
        # Run clippy, output JSON, pipe through formatter, save as Checkstyle XML
        # Use || true to prevent the step failing immediately if clippy finds errors,
        # allowing the results to be processed by reviewdog.
        run: |
          cargo clippy --all-targets --message-format=json | clippy-checkstyle-formatter > clippy-results.xml || true

      - name: Run reviewdog for Clippy Results
        # Only runs if the clippy step produced results
        if: success() || failure() # Run regardless of clippy step outcome (due to || true)
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "--- Checking clippy-results.xml ---"
          if [[ ! -s "clippy-results.xml" ]]; then
            echo "clippy-results.xml not found or is empty. Skipping reviewdog for clippy."
            # If fmt failed earlier, the job will still fail.
            # If fmt passed and clippy found nothing, this is success.
            exit 0
          fi

          echo "--- Running reviewdog with clippy results ---"
          # Use Checkstyle format, fail on warning/error, report as PR review
          reviewdog -f=checkstyle \
            -name="clippy" \
            -reporter="github-pr-review" \
            -fail-level="warning" \
            -level="warning" \
            clippy-results.xml