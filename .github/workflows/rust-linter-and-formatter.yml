# .github/workflows/rust-linter.yml

name: Rust Linter

on:
  pull_request:
    branches:
      - development  # Make sure this matches your target branch
  workflow_dispatch:   # Allows manual triggering

jobs:
  lint-rust:
    name: Lint Rust Code
    runs-on: ubuntu-latest

    permissions:
      contents: read        # To check out the code
      pull-requests: write  # To post review comments and create reviews
      checks: write         # To create check runs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      # Run fmt check, but allow workflow to continue to clippy
      - name: Run cargo fmt (Check only)
        run: cargo fmt --check
        continue-on-error: true # <<< ADDED THIS

      # Run clippy, output JSON to .sarif file, ignore clippy's exit code for now
      - name: Run cargo clippy
        id: clippy # Ensure the ID is here
        run: |
          cargo clippy --all-targets --message-format=json -- -D warnings > clippy-results.sarif || true

      # Run reviewdog using the JSON (interpreted as SARIF) output from clippy
      - name: Run reviewdog for Clippy Results
        if: always() # Still run always to potentially report fmt failure via job status
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "--- Checking clippy-results.sarif ---"
          # Simplified Check: Only check if the file exists and has size > 0
          if [[ ! -s "clippy-results.sarif" ]]; then
            echo "clippy-results.sarif not found or is empty. Skipping reviewdog analysis."
            # If fmt failed, the job annotation will show it. If clippy had no output, this is fine.
            exit 0
          fi

          echo "--- Running reviewdog with clippy results (SARIF format) ---"
          # Run reviewdog. Its fail-level will determine the step's success/failure based on SARIF content.
          reviewdog -f=sarif \
            -name="clippy" \
            -reporter="github-pr-review" \
            -fail-level="warning" \
            -level="warning" \
            clippy-results.sarif