# .github/workflows/rust-linter.yml

name: Rust Linter

on:
  pull_request:
    branches:
      - development  # Make sure this matches your target branch
  workflow_dispatch:   # Allows manual triggering

jobs:
  lint-rust:
    name: Lint Rust Code
    runs-on: ubuntu-latest

    permissions:
      contents: read        # To check out the code
      pull-requests: write  # To post review comments and create reviews
      checks: write         # To create check runs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # No fetch-depth needed initially unless reviewdog's diff_context is inaccurate.

      # Cache Cargo registry, index, installed tools, and build target directory
      - name: Cache Cargo Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/                # Cache installed tools like clippy-formatter
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/                      # Cache build artifacts
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Setup Rust toolchain with clippy and rustfmt components
      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      # Install the clippy-formatter tool
      - name: Install clippy-formatter
        run: cargo install clippy-formatter --locked

      # Install reviewdog for reporting
      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest # Or pin to a specific version like v0.17.3

      # Run rustfmt check - fails job if formatting issues exist, but allow continuation
      - name: Run cargo fmt (Check only)
        run: cargo fmt --check
        continue-on-error: true # Allow clippy to run even if fmt fails

      # Run clippy, pipe JSON output to clippy-formatter, save as Checkstyle XML
      - name: Run cargo clippy and Format Output
        id: clippy # Add ID
        run: |
          cargo clippy --all-targets --message-format=json -- -D warnings | clippy-formatter > clippy-results.xml || true
        # '|| true' ensures this step doesn't fail the job immediately if clippy finds issues.

      # Run reviewdog using the Checkstyle XML output from clippy
      - name: Run reviewdog for Clippy Results
        if: always() # Run always to process results or skip gracefully
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "--- Checking clippy-results.xml ---"
          # Simple check if file exists and has content
          if [[ ! -s "clippy-results.xml" ]]; then
            echo "clippy-results.xml not found or is empty. Skipping reviewdog analysis."
            # If fmt failed, the job status reflects it. If clippy had no output, this is fine.
            exit 0
          fi

          echo "--- Running reviewdog with clippy results (Checkstyle format) ---"
          # Use checkstyle format again
          reviewdog -f=checkstyle \
            -name="clippy" \
            -reporter="github-pr-review" \
            -fail-level="warning" \
            -level="warning" \
            clippy-results.xml