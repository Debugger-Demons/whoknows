# .github/workflows/rust-linter.yml

name: Rust Linter

on:
  pull_request:
    branches:
      - development # Make sure this matches your target branch
  workflow_dispatch:

jobs:
  lint-rust:
    name: Lint Rust Code
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history; might be needed later if we revert VALIDATE_ALL_CODEBASE
          fetch-depth: 0

      # *** STEP 1: Manual Linter Check ***
      - name: DEBUG - Manually run Rust Linters
        run: |
          echo "### Running Rust checks manually from $(pwd)"
          ls -la
          rustc --version
          cargo --version

          echo "### Running cargo fmt --check"
          # Run the command. If it fails (finds formatting issues), print a message but continue.
          if ! cargo fmt --check; then
            echo "NOTE: Manual 'cargo fmt --check' found issues."
          fi

          echo "### Running cargo clippy --all-targets -- -D warnings"
          # Run the command. If it fails (finds clippy issues), print a message but continue.
          if ! cargo clippy --all-targets -- -D warnings; then
            echo "NOTE: Manual 'cargo clippy' found issues."
          fi
        # This step will continue even if linters find errors above

      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      # *** STEP 2: Run Super-Linter with Maximum Verbosity ***
      - name: Run Super-Linter for Rust (DEBUG LOGGING)
        uses: super-linter/super-linter@v7
        continue-on-error: true # Keep true so reviewdog step always runs
        env:
          # --- Basic Setup ---
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_LOCAL: false

          # --- Linter Activation ---
          VALIDATE_RUST_CLIPPY: true
          VALIDATE_RUST_RUSTFMT: true

          # --- Output Configuration ---
          OUTPUT_FORMAT: sarif
          SARIF_FILE_NAME: results.sarif
          OUTPUT_DETAILS: detailed
          # *** INCREASE LOG LEVEL ***
          LOG_LEVEL: DEBUG # Crucial for seeing internal commands/output
          MULTI_STATUS: false
          DISABLE_ERRORS: false
          GITHUB_COMMENT: false

          # --- Context ---
          VALIDATE_ALL_CODEBASE: true # Keep true to force full scan

          # --- Filter ---
          FILTER_REGEX_EXCLUDE: '(^|/)Cargo\.toml$' # Keep filter that fixed previous error

      # *** STEP 3: Reviewdog (Check SARIF) ***
      - name: Run reviewdog with SARIF Results
        if: always()
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "--- Debug: Listing files before reviewdog ---"
          ls -l .

          echo "--- Debug: Checking results.sarif ---"
          if [[ -f "results.sarif" ]]; then
            echo "File results.sarif found."
            echo "File size: $(wc -c < results.sarif) bytes"
            echo "--- First 20 lines of results.sarif ---"
            head -n 20 results.sarif
            echo "--- End of first 20 lines ---"

            # Now try running reviewdog
            echo "--- Running reviewdog ---"
            reviewdog -f=sarif \
                      -name="rust-linter" \
                      -reporter="github-pr-review" \
                      -filter-mode="diff_context" \
                      -fail-level="warning" \
                      -level="warning" \
                      results.sarif
          else
            echo "ERROR: results.sarif not found! Examine Super-Linter DEBUG logs."
            # Exit 1 to clearly fail the workflow if the SARIF file is missing when errors were expected
            exit 1
          fi