# .github/workflows/rust-linter.yml

name: Rust Linter

on:
  pull_request:
    branches:
      - development  # Or 'development', or your primary branch
  workflow_dispatch:

jobs:
  lint-rust:
    name: Lint Rust Code
    runs-on: ubuntu-latest
    permissions:
      contents: read        # To check out the code
      pull-requests: write  # To post review comments and create reviews
      checks: write         # To create check runs (used by some reviewdog reporters)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch enough history for linters that diff against the base branch

      # Optional: Cache super-linter internal cache if needed to speed up subsequent runs
      # - name: Cache Super-Linter internal cache
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.cache/super-linter
      #     key: ${{ runner.os }}-super-linter-${{ github.sha }}  # Cache per commit
      #     restore-keys: |
      #       ${{ runner.os }}-super-linter-

      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1  # Pinning to v1 for stability
        with:
          reviewdog_version: latest  # Or pin to a specific version e.g., v0.17.3

      - name: Run Super-Linter for Rust
        uses: super-linter/super-linter@v7
        continue-on-error: true
        env:
          # --- Basic Setup ---
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_LOCAL: false

          # --- Linter Activation (INCLUSION STRATEGY) ---
          VALIDATE_RUST_CLIPPY: true
          VALIDATE_RUST_RUSTFMT: true

          # --- Output Configuration for Reviewdog ---
          OUTPUT_FORMAT: sarif
          SARIF_FILE_NAME: results.sarif
          OUTPUT_DETAILS: detailed
          LOG_LEVEL: WARN
          MULTI_STATUS: false
          DISABLE_ERRORS: false
          GITHUB_COMMENT: false  # Let reviewdog handle comments/reviews

          # --- Context ---
          VALIDATE_ALL_CODEBASE: false  # Lint changed files (requires fetch-depth: 0 and DEFAULT_BRANCH)
          # VALIDATE_ALL_CODEBASE: true  # Uncomment to lint everything
          DEFAULT_BRANCH: development  # Branch to compare against if VALIDATE_ALL_CODEBASE=false

      - name: Run reviewdog with SARIF Results
        if: always()
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Running reviewdog with SARIF file: results.sarif"

          # Check if the SARIF file exists and is not empty before running reviewdog
          if [[ ! -s "results.sarif" ]]; then
            echo "results.sarif not found or is empty. Skipping reviewdog."
            exit 0
          fi

          reviewdog -f=sarif \
            -name="rust-linter" \
            -reporter="github-pr-review" \
            -filter-mode="diff_context" \
            -fail-level="warning" \
            -level="warning" \
            results.sarif
