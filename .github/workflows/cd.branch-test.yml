# cd.branch-test.yml
name: branch-test - Continuous Deployment

on:
  push:
    branches: [python-to-rust] # <-- adjust for current branch to test
  workflow_dispatch:

env:
  # ---------------------------------------------
  # ------------ Environment Variables ----------
  #
  GHCR_REGISTRY: ghcr.io
  IMAGE_BASENAME: ${{ github.repository_owner }}/${{ github.event.repository.name }}
  # Secrets:
  GHCR_PAT_OR_TOKEN: ${{ secrets.DEV_GHCR_PAT_OR_TOKEN }}
  SERVER_USER: ${{ secrets.DEV_SERVER_USER }} # deployer
  SERVER_HOST: ${{ secrets.DEV_SERVER_HOST }} # IP or domain
  SERVER_PORT: ${{ secrets.DEV_SERVER_PORT }} # 22 ssh port, 10222
  # SSH:
  SSH_PRIVATE_KEY: ${{ secrets.DEV_SSH_PRIVATE_KEY }} # private key for SSH access
  ENV_FILE_CONTENT: ${{ secrets.DEV_ENV_FILE }} # .env file loaded content
  # Commands:
  SSH_CMD: ssh -i ~/.ssh/id_rsa -p ${{ secrets.DEV_SERVER_PORT }} -o StrictHostKeyChecking=no ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }}
  SCP_CMD: scp -i ~/.ssh/id_rsa -P ${{ secrets.DEV_SERVER_PORT }} -o StrictHostKeyChecking=no
  # paths:
  ENV_FILE: .env.development # production or development
  DEPLOY_DIR: ./deployment/whoknows
  FRONTEND_PATH: ./frontend
  NGINX_FILE_PATH: ./frontend/nginx.conf
  BACKEND_PATH: ./backend
  DOCKER_COMPOSE_FILE: ./docker-compose.dev.yml # prod or dev
  DEPLOY_SCRIPT: ./deployment/scripts/deploy.sh
  DOCKER_LOGIN_SCRIPT: ./deployment/scripts/docker-login.sh

jobs:
  validate-config:
    uses: ./.github/workflows/validate.env_and_secrets.yml
    secrets:
      PROD_ENV_FILE: ${{ secrets.PROD_ENV_FILE }}
      DEV_ENV_FILE: ${{ secrets.DEV_ENV_FILE }}
      PROD_SSH_PRIVATE_KEY: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
      DEV_SSH_PRIVATE_KEY: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
      PROD_GHCR_PAT_OR_TOKEN: ${{ secrets.PROD_GHCR_PAT_OR_TOKEN }}
      DEV_GHCR_PAT_OR_TOKEN: ${{ secrets.DEV_GHCR_PAT_OR_TOKEN }}

  #
  # ---------------------------------------------
  # ----------------- build-push ----------------
  #
  build-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read # permission to read the repository contents
      packages: write # permission to write to the GitHub Container Registry (GHCR)
    outputs:
      backend_image_sha: ${{ env.GHCR_REGISTRY }}/${{ steps.lowercaser.outputs.image_base }}/backend:${{ steps.image_tags.outputs.tag_sha }} # backend container image sha tag
      frontend_image_sha: ${{ env.GHCR_REGISTRY }}/${{ steps.lowercaser.outputs.image_base }}/frontend:${{ steps.image_tags.outputs.tag_sha }} # frontend container image sha tag

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ env.GHCR_PAT_OR_TOKEN }}

      # --------------------------------------------
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ env.SERVER_PORT }} -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

      #-------------------- Debug: Check Remote Path --------------------
      - name: Verify remote file existence and permissions via SSH
        run: |
          #echo "Attempting to SSH into ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} on port ${{ env.SERVER_PORT }}"
          # Ensure SSH key is set up correctly first (assuming a previous step does this)
          # Example: Ensure correct permissions if you manually placed the key
          # mkdir -p ~/.ssh
          # echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          # chmod 600 ~/.ssh/id_rsa
          # ssh-keyscan -p ${{ env.SERVER_PORT }} ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts # Add host key if needed

          #ssh -i ~/.ssh/id_rsa -p ${{ env.SERVER_PORT }} -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} 'ls -la /home/deployer/deployment/rust-actix-web_cd/'
          #ssh -i ~/.ssh/id_rsa -p ${{ env.SERVER_PORT }} -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} 'ls -la /home/deployer/deployment/'
          #ssh -i ~/.ssh/id_rsa -p ${{ env.SERVER_PORT }} -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} 'ls -la /home/deployer/'
          #ssh -i ~/.ssh/id_rsa -p ${{ env.SERVER_PORT }} -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} 'pwd' # Confirm starting directory if path were relative

      #-------------------- Database Transfer --------------------
      - name: Copy whoknows.db from deploy server
        run: |

          ls -l ${{ env.BACKEND_PATH }}
          mkdir -p /home/runner/work/whoknows/whoknows/data  # Create data directory in the build context
          scp -i ~/.ssh/id_rsa -P ${{ env.SERVER_PORT }} ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/home/deployer/deployment/rust-actix-web_cd/whoknows.db /home/runner/work/whoknows/whoknows/data
          ls ${{ env.BACKEND_PATH }}/data

        # ---------------------------------------------

      - name: Lowercase Image Base Name
        id: lowercaser
        run: echo "image_base=$(echo ${{ env.IMAGE_BASENAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Define Image Tags
        id: image_tags
        run: |
          TAG_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "tag_sha=${TAG_SHA}" >> $GITHUB_OUTPUT
          echo "tag_latest=latest" >> $GITHUB_OUTPUT

        # ---------------------------------------------

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.BACKEND_PATH }}
          file: ${{ env.BACKEND_PATH }}/Dockerfile
          push: true # push true to push the image to the registry
          tags: |
            ${{ env.GHCR_REGISTRY }}/${{ steps.lowercaser.outputs.image_base }}/backend:${{ steps.image_tags.outputs.tag_latest }}
            ${{ env.GHCR_REGISTRY }}/${{ steps.lowercaser.outputs.image_base }}/backend:${{ steps.image_tags.outputs.tag_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.FRONTEND_PATH }}
          file: ${{ env.FRONTEND_PATH }}/Dockerfile
          push: true
          tags: |
            ${{ env.GHCR_REGISTRY }}/${{ steps.lowercaser.outputs.image_base }}/frontend:${{ steps.image_tags.outputs.tag_latest }}
            ${{ env.GHCR_REGISTRY }}/${{ steps.lowercaser.outputs.image_base }}/frontend:${{ steps.image_tags.outputs.tag_sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ---------------------------------------------
  # ----------------- deploy --------------------

  deploy:
    name: Deploy to Server
    needs: build-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ env.SERVER_PORT }} -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

        # ------------------------------------------

      - name: Install dos2unix
        run: sudo apt-get update && sudo apt-get install -y dos2unix

      - name: Create .env file
        run: |
          echo "${{ env.ENV_FILE_CONTENT }}" > ${{ env.ENV_FILE }}

          dos2unix ${{ env.ENV_FILE }}

          # Add image tags to .env file
          echo "IMAGE_TAG_BACKEND=${{ needs.build-push.outputs.backend_image_sha }}" >> ${{ env.ENV_FILE }}
          echo "IMAGE_TAG_FRONTEND=${{ needs.build-push.outputs.frontend_image_sha }}" >> ${{ env.ENV_FILE }}

        # ------------------------------------------

      # create/update VERSION file
      - name: updating VERSION file
        run: |
          SERVER_DEST_BASE="${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_DIR }}"

          echo "DEPLOYMENT_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" > VERSION
          echo "GIT_COMMIT=${{ github.sha }}" >> VERSION
          echo "GIT_BRANCH=${GITHUB_REF#refs/heads/}" >> VERSION
          echo "IMAGE_TAG_BACKEND=${{ needs.build-push.outputs.backend_image_sha }}" >> VERSION
          echo "IMAGE_TAG_FRONTEND=${{ needs.build-push.outputs.frontend_image_sha }}" >> VERSION

          # Transfer to server
          ${{ env.SCP_CMD }} VERSION ${SERVER_DEST_BASE}/VERSION

        # ------------------------------------------

      - name: Transfer files to server
        run: |
          SERVER_DEST_BASE="${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_DIR }}"

          # mkdir
          ${{ env.SSH_CMD }} "mkdir -p ${{ env.DEPLOY_DIR }}" 

          # scp directly to final names
          ${{ env.SCP_CMD }} ${{ env.DOCKER_COMPOSE_FILE }} ${SERVER_DEST_BASE}/docker-compose.yml
          ${{ env.SCP_CMD }} ${{ env.ENV_FILE }} ${SERVER_DEST_BASE}/.env
          ${{ env.SCP_CMD }} ${{ env.NGINX_FILE_PATH }} ${SERVER_DEST_BASE}/nginx.conf
          ${{ env.SCP_CMD }} ${{ env.DEPLOY_SCRIPT }} ${SERVER_DEST_BASE}/deploy.sh
          ${{ env.SCP_CMD }} ${{ env.DOCKER_LOGIN_SCRIPT }} ${SERVER_DEST_BASE}/docker-login.sh

              # dir: 
                # ~/deployment/whoknows/
                  # ├── docker-compose.yml
                  # ├── .env
                  # ├── VERSION
                  # ├── deploy.sh
                  # ├── docker-login.sh
                  # └── nginx.conf

        # ------------------------------------------

      - name: Execute Deployment on Server
        run: |
          DEPLOY_DIR="${{ env.DEPLOY_DIR }}"
          ENV_FILE="${{ env.ENV_FILE }}"
          DOCKER_COMPOSE_FILE="${{ env.DOCKER_COMPOSE_FILE }}"
          NGINX_FILE_PATH="${{ env.NGINX_FILE_PATH }}"
          DEPLOY_SCRIPT="${{ env.DEPLOY_SCRIPT }}"
          DOCKER_LOGIN_SCRIPT="${{ env.DOCKER_LOGIN_SCRIPT }}"
          GHCR_PAT_OR_TOKEN="${{ env.GHCR_PAT_OR_TOKEN }}"
          GHCR_REGISTRY="${{ env.GHCR_REGISTRY }}"
          GITHUB_ACTOR="${{ github.actor }}"

          ${{ env.SSH_CMD }} << EOF
            set -e 
            cd ~/${DEPLOY_DIR}
            
            # --- Login, Deploy, Logout ---
            chmod +x ./docker-login.sh
            ./docker-login.sh "${GHCR_PAT_OR_TOKEN}" "${GHCR_REGISTRY}" "${GITHUB_ACTOR}"
            
            echo "Running deployment script (deploy.sh)..."
            chmod +x ./deploy.sh
            ./deploy.sh

            echo "Logging out from GHCR..."
            docker logout ${GHCR_REGISTRY}
          EOF
